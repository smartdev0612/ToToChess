/**
 * cbpAnimatedHeader.min.js v1.0.0
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2013, Codrops
 * http://www.codrops.com
 */
var cbpAnimatedHeader = (function () {
	var b = document.documentElement,
	g1 = document.querySelector(".cbp-af-header"),
	g5 = document.querySelector(".slide_box"),
	g6 = document.querySelector(".slide_box_right"),
	g7 = document.querySelector(".submenu_1"),
	g8 = document.querySelector(".submenu_2"),
	g9 = document.querySelector(".game_cata"),
	g10 = document.querySelector(".my_money"),
	g11 = document.querySelector(".cbp-af-header1"),
	g12 = document.querySelector(".mypage_btn"),
	g13 = document.querySelector(".menu_fixed_top"),
	
	
	e = false,
	a = 100;
	function f() {
		window.addEventListener("scroll", function (h) {
			if (!e) {
				e = true;
				setTimeout(d, 100)
			}
		}, false)
	}
	function d() {
		var h = c();
		if (h >= a) {
			classie.add(g1, "cbp-af-header-shrink")
			classie.add(g5, "slide_box_2")
			classie.add(g6, "slide_box_2")
			classie.add(g11, "cbp-af-header-shrink")
			classie.add(g12, "cbp-af-header-shrink")
			classie.add(g13, "cbp-af-header-shrink")

		} else {
			classie.remove(g1, "cbp-af-header-shrink")
			classie.remove(g5, "slide_box_2")
			classie.remove(g6, "slide_box_2")
			classie.remove(g11, "cbp-af-header-shrink")
			classie.remove(g12, "cbp-af-header-shrink")
			classie.remove(g13, "cbp-af-header-shrink")
		}
		e = false
	}
	function c() {
		return window.pageYOffset || b.scrollTop
	}
	f()
})();




/* 페이지 로딩을 위한 js */

jq$(document).ready(function() {
  jq$('form#settings').height(jq$('html').height());
  jq$(window).resize(function() {
    jq$('form#settings').height(jq$('html').height());
  });
  
  var spokeNumber = parseInt(jq$('input[name=spoke-number]').val());
  var spokeWidth = parseInt(jq$('input[name=spoke-width]').val());
  var boxWidth = parseInt(jq$('input[name=box-width]').val());
  var duration = parseInt(jq$('input[name=duration]').val());
  var delay = parseFloat(jq$('input[name=delay]').val());
  
  var loadingCircles = new Loading('loading-circles', spokeNumber, spokeWidth, boxWidth, duration, delay, 'loading-circles');
  var loadingRectangles = new Loading('loading-rectangles', spokeNumber, spokeWidth, boxWidth, duration, delay, 'loading-rectangles');
  loadingCircles.init();
  loadingRectangles.init();
  
  jq$('input[name=spoke-number]').keyup(function() {
    spokeNumber = parseInt(jq$(this).val());
    if (spokeNumber > 0) {
      loadingCircles.setSpokeNumber(spokeNumber);
      loadingRectangles.setSpokeNumber(spokeNumber);
    }
  });
  
  jq$('input[name=spoke-width]').keyup(function() {
    spokeWidth = parseInt(jq$(this).val());
    if (spokeWidth > 0) {
      loadingCircles.setSpokeWidth(spokeWidth);
      loadingRectangles.setSpokeWidth(spokeWidth);
    }
  });
  
  jq$('input[name=box-width]').keyup(function() {
    boxWidth = parseInt(jq$(this).val());
    if (boxWidth > 0) {
      loadingCircles.setBoxWidth(boxWidth);
      loadingRectangles.setBoxWidth(boxWidth);
    }
  });
  
  jq$('input[name=duration]').keyup(function() {
    duration = parseInt(jq$(this).val());
    if (duration > 0) {
      loadingCircles.setDuration(duration);
      loadingRectangles.setDuration(duration);
    }
  });
  
  jq$('input[name=delay]').keyup(function() {
    delay = parseFloat(jq$(this).val());
    if (delay > 0) {
      loadingCircles.setDelay(delay);
      loadingRectangles.setDelay(delay);
    }
  });
});

function Loading(loadingDivId, spokeNumber, spokeWidth, boxWidth, duration, delay, type) {
  this.loadingDiv = jq$('#' + loadingDivId);
  this.spokeNumber = spokeNumber;
  this.spokeWidth = spokeWidth;
  this.boxWidth = boxWidth;
  this.duration = duration;
  this.delay = delay;
  this.type = type;
  
  this.init = function() {
    switch (type) {
      case 'loading-circles':
        this.loadingDiv.addClass('loading-circles').width(this.boxWidth).height(this.boxWidth);
        for (var i = 0; i < this.spokeNumber; i++) {
          var spoke = jq$('<div>').addClass('spoke').width(this.spokeWidth).height(this.spokeWidth);
          
          var degree = (i*360/this.spokeNumber)*(Math.PI/180);
          var radius = (this.loadingDiv.width()-this.spokeWidth)/2;
          var x = Math.cos(degree)*radius+radius;
          var y = Math.sin(degree)*radius+radius;
          
          spoke.css({
            'top' : y + 'px',
            'left' : x + 'px',
            'animation-duration': this.duration + 's',
            'animation-delay' : this.delay*i + 's'
          });
          
          spoke.appendTo(this.loadingDiv);
        }
        break;
      case 'loading-rectangles':
        this.loadingDiv.addClass('loading-rectangles').width(this.boxWidth).height(this.boxWidth);
        for (var i = 0; i < this.spokeNumber; i++) {
          var spoke = jq$('<div>').addClass('spoke').width(this.spokeWidth*1.5).height(this.spokeWidth/3);
          
          var degree = i*360/this.spokeNumber;
          var degreeRadians = degree*(Math.PI/180);
          var radius = (this.loadingDiv.width()-this.spokeWidth*3)/2;
          var x = Math.cos(degreeRadians)*radius+radius+this.spokeWidth*.75;
          var y = Math.sin(degreeRadians)*radius+radius+this.spokeWidth*1.5-2;
          
          
          spoke.css({
            'top' : y + 'px',
            'left' : x + 'px',
            'transform' : 'rotate(' + degree + 'deg)',
            'animation-duration': this.duration + 's',
            'animation-delay' : this.delay*i + 's'
          });
          
          
          spoke.appendTo(this.loadingDiv);
        }
        break;
    }
  }
  
  this.clear = function() {
    this.loadingDiv.removeClass('loading-circles');
    this.loadingDiv.empty();
  }
  
  this.setSpokeNumber = function(spokeNumber) {
    this.spokeNumber = spokeNumber;
    this.clear();
    this.init();
  }
  
  this.setSpokeWidth = function(spokeWidth) {
    this.spokeWidth = spokeWidth;
    this.clear();
    this.init();
  }
  
  this.setBoxWidth = function(boxWidth) {
    this.boxWidth = boxWidth;
    this.clear();
    this.init();
  }
  
  this.setDuration = function(duration) {
    this.duration = duration;
    this.clear();
    this.init();
  }
  
  this.setDelay = function(delay) {
    this.delay = delay;
    this.clear();
    this.init();
  }
}

